[
  {
    "id": "day12-story-01",
    "kind": "story",
    "md": "# Day 12: 정보 묶음, 객체\n\n현실 세계의 사물처럼, 프로그래밍에서도 여러 정보를 하나의 단위로 묶어 관리할 수 있습니다. 예를 들어, '자동차'라는 개념은 색상, 브랜드, 속도 등 다양한 속성을 가집니다. 이처럼 관련된 데이터와 기능을 함께 묶어 놓은 것이 바로 '객체'입니다."
  },
  {
    "id": "day12-concept-01",
    "kind": "concept",
    "md": "# 객체 (Object)\n\n**객체**는 속성(property)과 메서드(method)를 포함할 수 있는 데이터 구조입니다. 속성은 객체의 특징을 나타내는 값이고, 메서드는 객체가 수행할 수 있는 동작(함수)입니다.\n\n- **속성 (Property):** `키(key): 값(value)` 형태로 데이터를 저장합니다. 키는 문자열이며, 값은 모든 데이터 타입이 될 수 있습니다.\n- **메서드 (Method):** 객체 내부에 정의된 함수로, 객체의 동작을 정의합니다."
  },
  {
    "id": "day12-example-01",
    "kind": "example",
    "md": "# 객체 생성 및 사용 예시\n\n사람의 정보를 담는 객체를 만들어 볼까요?\n\n```javascript\nlet person = {\n  name: \"김철수\",\n  age: 30,\n  isStudent: false,\n  greet: function() {\n    console.log(\"안녕하세요, 제 이름은 \" + this.name + \"입니다.\");\n  }\n};\n\nconsole.log(person.name); // 결과: 김철수\nconsole.log(person.age);  // 결과: 30\nperson.greet();           // 결과: 안녕하세요, 제 이름은 김철수입니다.\n\n// 속성 추가\nperson.job = \"개발자\";\nconsole.log(person.job); // 결과: 개발자\n\n// 속성 변경\nperson.age = 31;\nconsole.log(person.age); // 결과: 31\n\n// 속성 삭제\ndelete person.isStudent;\nconsole.log(person.isStudent); // 결과: undefined\n```\n\n객체는 `.` 연산자나 `[]` 연산자를 사용하여 속성에 접근할 수 있습니다."
  },
  {
    "id": "day12-concept-02",
    "kind": "concept",
    "md": "# 객체 리터럴과 생성자\n\n객체를 생성하는 방법에는 주로 **객체 리터럴** 방식과 **생성자 함수** 방식이 있습니다.\n\n- **객체 리터럴:** `{}` 중괄호를 사용하여 객체를 직접 정의하는 가장 일반적인 방법입니다.\n- **생성자 함수:** `new` 키워드와 함께 함수를 호출하여 객체를 생성하는 방법입니다. 이를 통해 동일한 구조의 객체를 여러 개 만들 수 있습니다."
  },
  {
    "id": "day12-example-02",
    "kind": "example",
    "md": "# 객체 리터럴과 생성자 함수 예시\n\n```javascript\n// 객체 리터럴 방식\nlet car1 = {\n  brand: \"Hyundai\",\n  model: \"Sonata\"\n};\n\nconsole.log(car1.brand); // 결과: Hyundai\n\n// 생성자 함수 방식\nfunction Car(brand, model) {\n  this.brand = brand;\n  this.model = model;\n  this.drive = function() {\n    console.log(this.brand + \" \" + this.model + \"이(가) 운전 중입니다.\");\n  };\n}\n\nlet car2 = new Car(\"Kia\", \"K5\");\nlet car3 = new Car(\"Samsung\", \"SM6\");\n\nconsole.log(car2.model); // 결과: K5\ncar3.drive();            // 결과: Samsung SM6이(가) 운전 중입니다.\n```\n\n생성자 함수는 객체 지향 프로그래밍의 기본이 됩니다."
  },
  {
    "id": "day12-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day12-01"
  },
  {
    "id": "day12-lab-01",
    "kind": "lab",
    "labId": "lab-day12-01"
  },
  {
    "id": "day12-review-01",
    "kind": "review",
    "md": "# Day 12 복습\n\n오늘은 객체의 개념, 속성과 메서드, 객체 리터럴과 생성자 함수에 대해 학습했습니다. 객체는 관련된 데이터를 구조화하고 관리하는 데 매우 유용하며, 복잡한 프로그램을 만드는 데 필수적인 요소입니다.\n\n다음 시간에는 '배열'에 대해 알아보겠습니다!"
  }
]
