[
  {
    "id": "day30-story-01",
    "kind": "story",
    "md": "# Day 30: 개발을 돕는 강력한 도구들, 프레임워크와 라이브러리\n\n우리가 복잡한 건물을 지을 때, 모든 것을 처음부터 설계하고 만드는 대신 미리 만들어진 구조물이나 도구들을 활용하면 훨씬 효율적입니다. 프로그래밍에서도 이와 유사하게, 개발 과정을 돕고 생산성을 높여주는 '프레임워크'와 '라이브러리'라는 강력한 도구들이 있습니다. 이들은 개발자가 더 쉽고 빠르게 애플리케이션을 만들 수 있도록 지원합니다."
  },
  {
    "id": "day30-concept-01",
    "kind": "concept",
    "md": "# 프레임워크 (Framework)와 라이브러리 (Library)\n\n**프레임워크**와 **라이브러리**는 모두 개발자가 코드를 더 효율적으로 작성할 수 있도록 돕는 코드의 집합이지만, 개발에 대한 '제어권'과 '구조'에서 차이가 있습니다.\n\n- **프레임워크 (Framework):** 소프트웨어 애플리케이션을 개발하는 데 필요한 큰 틀과 구조를 제공합니다. 개발자는 프레임워크가 정한 특정 규칙과 흐름에 따라 코드를 작성해야 합니다. 제어권이 프레임워크에 있습니다. (예: React Native, Angular, Vue.js)\n- **라이브러리 (Library):** 특정 기능을 수행하기 위한 재사용 가능한 코드의 집합입니다. 개발자가 필요할 때 호출하여 사용할 수 있으며, 개발 주도권이 개발자에게 있습니다. (예: jQuery, Lodash, Axios)\n\n**주요 차이점:**\n- **제어권:** 프레임워크는 개발자의 코드를 호출하지만, 라이브러리는 개발자의 코드가 라이브러리를 호출합니다. (Inversion of Control)\n- **구조:** 프레임워크는 전체 애플리케이션의 구조를 제공하는 반면, 라이브러리는 특정 기능에 집중합니다.\n- **유연성:** 라이브러리가 프레임워크보다 더 유연하며, 필요한 부분만 선택적으로 사용할 수 있습니다."
  },
  {
    "id": "day30-example-01",
    "kind": "example",
    "md": "# 프레임워크와 라이브러리 사용 예시\n\nReact (라이브러리)와 Angular (프레임워크)의 차이를 통해 이해해 볼까요?\n\n```javascript\n// React (라이브러리) 예시: 필요한 부분만 가져와 사용\n// React는 UI 렌더링에 집중하며, 개발자가 애플리케이션의 전체 구조를 자유롭게 설계할 수 있습니다.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction MyComponent() {\n  return <h1>Hello, React!</h1>;\n}\n\nReactDOM.render(<MyComponent />, document.getElementById('root'));\n\n// Angular (프레임워크) 예시: 정해진 구조와 규칙을 따름\n// Angular는 컴포넌트, 서비스, 모듈 등 정해진 구조와 규칙에 따라 개발해야 합니다.\n// (Angular 코드는 TypeScript 기반이므로 JavaScript와 문법이 다를 수 있습니다.)\n// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-root',\n//   template: `<h1>Hello, Angular!</h1>`,\n// })\n// export class AppComponent {\n//   title = 'my-app';\n// }\n```\n\nReact는 UI를 구축하는 데 필요한 도구를 제공하지만, Angular는 전체 애플리케이션을 구축하는 데 필요한 포괄적인 구조와 규칙을 제공합니다."
  },
  {
    "id": "day30-concept-02",
    "kind": "concept",
    "md": "# JavaScript 생태계의 주요 프레임워크와 라이브러리\n\nJavaScript는 웹 개발에서 가장 널리 사용되는 언어인 만큼, 수많은 프레임워크와 라이브러리가 존재합니다.\n\n- **프론트엔드 프레임워크/라이브러리:**\n  - **React:** UI 개발을 위한 라이브러리 (Facebook 개발). 컴포넌트 기반 개발, 가상 DOM 사용.\n  - **Angular:** 구글에서 개발한 풀스택 프레임워크. TypeScript 기반, 강력한 기능 제공.\n  - **Vue.js:** 점진적 채택이 가능한 프레임워크. 배우기 쉽고 유연함.\n- **백엔드 프레임워크:**\n  - **Node.js:** JavaScript 런타임 환경. 서버 사이드 개발 가능.\n  - **Express.js:** Node.js를 위한 웹 애플리케이션 프레임워크. 빠르고 최소한의 기능 제공.\n- **기타 라이브러리:**\n  - **jQuery:** DOM 조작을 쉽게 해주는 라이브러리 (현재는 사용이 줄어드는 추세).\n  - **Lodash:** 유틸리티 함수 모음. 데이터 조작에 유용.\n  - **Axios / Fetch API:** HTTP 통신을 위한 라이브러리/API."
  },
  {
    "id": "day30-example-02",
    "kind": "example",
    "md": "# 라이브러리 활용 예시: Lodash\n\nLodash 라이브러리를 사용하여 배열을 쉽게 조작해 볼까요?\n\n```javascript\n// Lodash 라이브러리 사용 예시\n// npm install lodash 또는 CDN으로 로드\n\n// import _ from 'lodash'; // 모듈 방식\n// 또는 <script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"></script>\n\nconst numbers = [1, 2, 3, 4, 5];\n\n// 배열의 첫 번째 요소 가져오기\nconst first = _.head(numbers);\nconsole.log(first); // 결과: 1\n\n// 배열의 마지막 요소 가져오기\nconst last = _.last(numbers);\nconsole.log(last); // 결과: 5\n\n// 배열에서 특정 값 제거\nconst filtered = _.without(numbers, 2, 4);\nconsole.log(filtered); // 결과: [1, 3, 5]\n\n// 배열 정렬\nconst unsorted = [3, 1, 4, 1, 5, 9];\nconst sorted = _.sortBy(unsorted);\nconsole.log(sorted); // 결과: [1, 1, 3, 4, 5, 9]\n```\n\nLodash와 같은 유틸리티 라이브러리는 반복적인 작업을 줄여주고 코드의 가독성을 높여줍니다."
  },
  {
    "id": "day30-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day30-01"
  },
  {
    "id": "day30-lab-01",
    "kind": "lab",
    "labId": "lab-day30-01"
  },
  {
    "id": "day30-review-01",
    "kind": "review",
    "md": "# Day 30 복습\n\n오늘은 프레임워크와 라이브러리의 개념, 주요 차이점, 그리고 JavaScript 생태계의 대표적인 프레임워크와 라이브러리에 대해 학습했습니다. 이들은 개발 생산성을 높이고 복잡한 애플리케이션을 효율적으로 구축하는 데 필수적인 도구입니다.\n\n이것으로 30일간의 JavaScript 학습 여정을 마칩니다! 그동안 배운 개념들을 바탕으로 멋진 프로젝트를 만들어나가시길 바랍니다."
  }
]
