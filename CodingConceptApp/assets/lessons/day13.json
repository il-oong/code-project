[
  {
    "id": "day13-story-01",
    "kind": "story",
    "md": "# Day 13: 여러 정보를 한 번에 관리하는 방법, 배열\n\n우리는 일상생활에서 여러 개의 물건을 한데 묶어 관리하곤 합니다. 예를 들어, 장바구니에 여러 식료품을 담거나, 친구들의 이름을 목록으로 만들 때처럼요. 프로그래밍에서도 이와 같이 여러 데이터를 순서대로 묶어서 효율적으로 관리할 수 있는 방법이 있는데, 이것이 바로 '배열'입니다."
  },
  {
    "id": "day13-concept-01",
    "kind": "concept",
    "md": "# 배열 (Array)\n\n**배열**은 여러 개의 값을 순서대로 저장하는 특별한 종류의 객체입니다. 각 값은 '요소(element)'라고 불리며, 고유한 숫자 '인덱스(index)'를 통해 접근할 수 있습니다.\n\n- **순서:** 배열의 요소는 순서를 가집니다. 첫 번째 요소는 인덱스 `0`부터 시작합니다.\n- **다양한 데이터 타입:** 하나의 배열 안에 숫자, 문자열, 객체 등 다양한 타입의 데이터를 함께 저장할 수 있습니다.\n- **동적 크기:** 배열의 크기는 필요에 따라 늘리거나 줄일 수 있습니다."
  },
  {
    "id": "day13-example-01",
    "kind": "example",
    "md": "# 배열 생성 및 요소 접근 예시\n\n과일 목록을 배열로 만들어 볼까요?\n\n```javascript\n// 배열 리터럴을 이용한 생성\nlet fruits = [\"사과\", \"바나나\", \"오렌지\"];\n\nconsole.log(fruits[0]); // 결과: 사과 (첫 번째 요소)\nconsole.log(fruits[1]); // 결과: 바나나\nconsole.log(fruits[2]); // 결과: 오렌지\n\n// 배열의 길이 확인\nconsole.log(fruits.length); // 결과: 3\n\n// 배열의 마지막 요소 접근\nconsole.log(fruits[fruits.length - 1]); // 결과: 오렌지\n\n// Array() 생성자를 이용한 생성\nlet numbers = new Array(1, 2, 3, 4, 5);\nconsole.log(numbers); // 결과: [1, 2, 3, 4, 5]\n```\n\n배열의 각 요소는 대괄호 `[]` 안에 인덱스를 넣어 접근합니다."
  },
  {
    "id": "day13-concept-02",
    "kind": "concept",
    "md": "# 배열의 주요 메서드\n\n배열은 요소를 추가, 삭제, 변경하거나 순회하는 등 다양한 작업을 수행할 수 있는 유용한 메서드들을 제공합니다.\n\n- **`push()`:** 배열의 끝에 요소를 추가합니다.\n- **`pop()`:** 배열의 마지막 요소를 제거하고 반환합니다.\n- **`unshift()`:** 배열의 시작 부분에 요소를 추가합니다.\n- **`shift()`:** 배열의 첫 번째 요소를 제거하고 반환합니다.\n- **`forEach()`:** 배열의 각 요소에 대해 지정된 함수를 실행합니다.\n- **`map()`:** 배열의 모든 요소에 함수를 호출한 결과를 모아 새 배열을 반환합니다.\n- **`filter()`:** 특정 조건을 만족하는 요소들만 모아 새 배열을 반환합니다."
  },
  {
    "id": "day13-example-02",
    "kind": "example",
    "md": "# 배열 메서드 사용 예시\n\n```javascript\nlet colors = [\"빨강\", \"초록\", \"파랑\"];\n\n// push(): 끝에 추가\ncolors.push(\"노랑\");\nconsole.log(colors); // 결과: [\"빨강\", \"초록\", \"파랑\", \"노랑\"]\n\n// pop(): 마지막 요소 제거\nlet lastColor = colors.pop();\nconsole.log(lastColor); // 결과: 노랑\nconsole.log(colors);    // 결과: [\"빨강\", \"초록\", \"파랑\"]\n\n// unshift(): 앞에 추가\ncolors.unshift(\"검정\");\nconsole.log(colors); // 결과: [\"검정\", \"빨강\", \"초록\", \"파랑\"]\n\n// shift(): 첫 번째 요소 제거\nlet firstColor = colors.shift();\nconsole.log(firstColor); // 결과: 검정\nconsole.log(colors);     // 결과: [\"빨강\", \"초록\", \"파랑\"]\n\n// forEach(): 모든 요소 순회\ncolors.forEach(function(color) {\n  console.log(color + \"색\");\n});\n// 결과:\n// 빨강색\n// 초록색\n// 파랑색\n```\n\n이 외에도 다양한 배열 메서드를 활용하여 데이터를 효율적으로 다룰 수 있습니다."
  },
  {
    "id": "day13-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day13-01"
  },
  {
    "id": "day13-lab-01",
    "kind": "lab",
    "labId": "lab-day13-01"
  },
  {
    "id": "day13-review-01",
    "kind": "review",
    "md": "# Day 13 복습\n\n오늘은 배열의 개념, 요소 접근 방법, 그리고 `push()`, `pop()`, `forEach()`와 같은 주요 배열 메서드에 대해 학습했습니다. 배열은 여러 데이터를 효율적으로 관리하고 조작하는 데 필수적인 자료구조입니다.\n\n다음 시간에는 '클래스'에 대해 알아보겠습니다!"
  }
]
