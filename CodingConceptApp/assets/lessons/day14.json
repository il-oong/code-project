[
  {
    "id": "day14-story-01",
    "kind": "story",
    "md": "# Day 14: 객체를 만드는 설계도, 클래스\n\n우리가 집을 지을 때 설계도가 필요하듯이, 프로그래밍에서도 비슷한 형태의 객체를 여러 개 만들 때 '설계도' 역할을 하는 것이 있습니다. 이것이 바로 '클래스'입니다. 클래스는 객체를 생성하기 위한 틀을 제공하며, 객체 지향 프로그래밍의 핵심 개념 중 하나입니다."
  },
  {
    "id": "day14-concept-01",
    "kind": "concept",
    "md": "# 클래스 (Class)\n\n**클래스**는 객체를 생성하기 위한 템플릿 또는 설계도입니다. 클래스 안에는 객체가 가질 속성(데이터)과 메서드(기능)를 정의합니다.\n\n- **클래스 선언:** `class` 키워드를 사용하여 클래스를 정의합니다.\n- **생성자 (Constructor):** `constructor`라는 특별한 메서드로, 클래스의 인스턴스(객체)가 생성될 때 초기화를 담당합니다.\n- **속성 (Property/Field):** 객체가 가질 데이터를 정의합니다. 생성자 안에서 `this.속성명 = 값` 형태로 정의하거나, 클래스 본문에서 직접 선언할 수 있습니다."
  },
  {
    "id": "day14-example-01",
    "kind": "example",
    "md": "# 클래스 생성 및 인스턴스화 예시\n\n`Person` 클래스를 만들고 인스턴스를 생성해 볼까요?\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(`안녕하세요, 제 이름은 ${this.name}이고, ${this.age}살입니다.`);\n  }\n}\n\n// 클래스의 인스턴스 생성\nlet person1 = new Person(\"김철수\", 30);\nlet person2 = new Person(\"이영희\", 25);\n\nperson1.greet(); // 결과: 안녕하세요, 제 이름은 김철수이고, 30살입니다.\nperson2.greet(); // 결과: 안녕하세요, 제 이름은 이영희이고, 25살입니다.\n\nconsole.log(person1.name); // 결과: 김철수\n```\n\n`new` 키워드를 사용하여 클래스의 새로운 인스턴스를 생성합니다."
  },
  {
    "id": "day14-concept-02",
    "kind": "concept",
    "md": "# 클래스 상속과 정적 메서드\n\n클래스는 다른 클래스의 기능을 물려받아 확장할 수 있으며, 인스턴스 없이도 호출할 수 있는 특별한 메서드를 가질 수 있습니다.\n\n- **상속 (`extends`):** `extends` 키워드를 사용하여 다른 클래스(부모 클래스)의 속성과 메서드를 상속받아 새로운 클래스(자식 클래스)를 만듭니다.\n- **`super()`:** 자식 클래스의 생성자에서 부모 클래스의 생성자를 호출할 때 사용합니다. `this`를 사용하기 전에 반드시 호출해야 합니다.\n- **정적 메서드 (`static`):** `static` 키워드를 사용하여 정의하며, 클래스의 인스턴스 없이 클래스 이름으로 직접 호출할 수 있습니다. 주로 유틸리티 함수를 만들 때 사용됩니다."
  },
  {
    "id": "day14-example-02",
    "kind": "example",
    "md": "# 상속과 정적 메서드 예시\n\n`Person` 클래스를 상속받는 `Student` 클래스를 만들어 볼까요?\n\n```javascript\nclass Student extends Person {\n  constructor(name, age, studentId) {\n    super(name, age); // 부모 클래스의 생성자 호출\n    this.studentId = studentId;\n  }\n\n  study() {\n    console.log(`${this.name} 학생이 공부하고 있습니다.`);\n  }\n\n  static getSchoolName() {\n    return \"코딩대학교\";\n  }\n}\n\nlet student1 = new Student(\"박지민\", 20, \"20231234\");\nstudent1.greet(); // 결과: 안녕하세요, 제 이름은 박지민이고, 20살입니다.\nstudent1.study(); // 결과: 박지민 학생이 공부하고 있습니다.\n\nconsole.log(student1.studentId); // 결과: 20231234\nconsole.log(Student.getSchoolName()); // 결과: 코딩대학교 (정적 메서드 호출)\n```\n\n상속을 통해 코드의 재사용성을 높이고, 정적 메서드를 통해 클래스 자체와 관련된 유용한 기능을 제공할 수 있습니다."
  },
  {
    "id": "day14-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day14-01"
  },
  {
    "id": "day14-lab-01",
    "kind": "lab",
    "labId": "lab-day14-01"
  },
  {
    "id": "day14-review-01",
    "kind": "review",
    "md": "# Day 14 복습\n\n오늘은 클래스의 개념, 클래스 선언, 생성자, 속성, 메서드, 상속, 그리고 정적 메서드에 대해 학습했습니다. 클래스는 객체 지향 프로그래밍의 기본을 이루며, 복잡한 시스템을 체계적으로 설계하고 관리하는 데 필수적인 도구입니다.\n\n다음 시간에는 '모듈'에 대해 알아보겠습니다!"
  }
]
