[
  {
    "id": "day15-story-01",
    "kind": "story",
    "md": "# Day 15: 코드를 나누고 합치는 방법, 모듈\n\n복잡한 프로그램을 만들다 보면 코드가 점점 길어지고 관리하기 어려워집니다. 마치 큰 건물을 지을 때 각 부분을 따로 만들어서 조립하듯이, 프로그래밍에서도 코드를 여러 개의 작은 파일로 나누어 관리하고 필요할 때 가져다 쓸 수 있습니다. 이것이 바로 '모듈'의 개념입니다."
  },
  {
    "id": "day15-concept-01",
    "kind": "concept",
    "md": "# 모듈 (Module)\n\n**모듈**은 특정 기능이나 데이터의 집합을 하나의 파일 단위로 묶어 놓은 것입니다. 모듈을 사용하면 코드를 재사용하고, 다른 코드와의 의존성을 줄여 프로그램을 더 효율적으로 관리할 수 있습니다.\n\n- **모듈화의 장점:**\n  - **코드 재사용성:** 한 번 만든 모듈을 여러 프로젝트에서 재사용할 수 있습니다.\n  - **유지보수 용이성:** 기능별로 코드가 분리되어 있어 특정 기능을 수정하기 쉽습니다.\n  - **이름 충돌 방지:** 각 모듈은 자신만의 스코프를 가지므로, 전역 변수 이름 충돌을 피할 수 있습니다.\n  - **의존성 관리:** 어떤 모듈이 다른 모듈에 의존하는지 명확하게 파악할 수 있습니다."
  },
  {
    "id": "day15-example-01",
    "kind": "example",
    "md": "# 모듈 내보내기 (export) 및 가져오기 (import) 예시\n\n간단한 계산기 모듈을 만들어 볼까요?\n\n**`math.js` 파일:**\n```javascript\n// math.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n\nexport const PI = 3.14159;\n```\n\n**`main.js` 파일:**\n```javascript\n// main.js\nimport { add, subtract, PI } from './math.js';\n\nconsole.log(add(10, 5));      // 결과: 15\nconsole.log(subtract(10, 5)); // 결과: 5\nconsole.log(PI);              // 결과: 3.14159\n```\n\n`export` 키워드를 사용하여 모듈의 기능을 내보내고, `import` 키워드를 사용하여 다른 파일에서 내보낸 기능을 가져와 사용할 수 있습니다."
  },
  {
    "id": "day15-concept-02",
    "kind": "concept",
    "md": "# 기본 내보내기 (Default Export)\n\n모듈은 하나의 값을 **기본 내보내기(default export)**로 지정할 수 있습니다. 이는 모듈에서 가장 중요하거나 대표적인 기능을 내보낼 때 유용합니다.\n\n- **`export default`:** 모듈당 하나만 사용할 수 있으며, 가져올 때 중괄호 `{}` 없이 원하는 이름으로 가져올 수 있습니다."
  },
  {
    "id": "day15-example-02",
    "kind": "example",
    "md": "# 기본 내보내기 예시\n\n사용자 정보를 관리하는 모듈을 만들어 볼까요?\n\n**`user.js` 파일:**\n```javascript\n// user.js\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nexport default User;\n```\n\n**`app.js` 파일:**\n```javascript\n// app.js\nimport MyUser from './user.js'; // 원하는 이름 (MyUser)으로 가져오기\n\nconst user = new MyUser(\"Alice\");\nuser.sayHello(); // 결과: Hello, my name is Alice\n```\n\n기본 내보내기를 사용하면 모듈의 핵심 기능을 더 직관적으로 사용할 수 있습니다."
  },
  {
    "id": "day15-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day15-01"
  },
  {
    "id": "day15-lab-01",
    "kind": "lab",
    "labId": "lab-day15-01"
  },
  {
    "id": "day15-review-01",
    "kind": "review",
    "md": "# Day 15 복습\n\n오늘은 모듈의 개념, 모듈화의 장점, 그리고 `export`와 `import`를 사용한 모듈 내보내기/가져오기 방법에 대해 학습했습니다. 모듈은 코드를 체계적으로 관리하고 재사용성을 높이는 데 필수적인 프로그래밍 기법입니다.\n\n다음 시간에는 '비동기 프로그래밍'에 대해 알아보겠습니다!"
  }
]
