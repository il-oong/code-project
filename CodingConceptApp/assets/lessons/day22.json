[
  {
    "id": "day22-story-01",
    "kind": "story",
    "md": "# Day 22: JavaScript의 비동기 마법, 이벤트 루프\n\nJavaScript는 싱글 스레드 언어라고 알려져 있지만, 어떻게 비동기 작업을 처리하고 동시에 여러 일을 하는 것처럼 보일까요? 마치 한 명의 요리사가 여러 주문을 동시에 처리하기 위해 효율적인 시스템을 사용하는 것과 같습니다. 이 비밀은 바로 '이벤트 루프'에 있습니다. 이벤트 루프는 JavaScript가 비동기 작업을 관리하고 논블로킹 방식으로 동작하게 하는 핵심 메커니즘입니다."
  },
  {
    "id": "day22-concept-01",
    "kind": "concept",
    "md": "# 이벤트 루프 (Event Loop)\n\n**이벤트 루프**는 JavaScript의 런타임 모델에서 코드 실행, 이벤트 처리, 큐에 대기 중인 작업을 관리하는 메커니즘입니다. JavaScript 엔진은 단일 호출 스택을 가지고 있지만, 이벤트 루프를 통해 비동기 작업을 효율적으로 처리하여 논블로킹(non-blocking) 방식으로 동작할 수 있습니다.\n\n- **콜 스택 (Call Stack):** 함수 호출의 실행 순서를 추적하는 LIFO(Last In, First Out) 자료구조입니다. 동기적 코드가 실행됩니다.\n- **힙 (Heap):** 객체와 같은 동적 데이터가 저장되는 메모리 영역입니다.\n- **태스크 큐 (Task Queue / Callback Queue):** 비동기 작업(예: `setTimeout`, `fetch`, DOM 이벤트)의 콜백 함수들이 대기하는 큐입니다. 매크로태스크 큐라고도 불립니다.\n- **마이크로태스크 큐 (Microtask Queue):** Promise의 `.then()`, `.catch()`, `await` 이후의 코드와 같은 마이크로태스크들이 대기하는 큐입니다. 태스크 큐보다 우선순위가 높습니다."
  },
  {
    "id": "day22-example-01",
    "kind": "example",
    "md": "# 이벤트 루프 동작 예시\n\n```javascript\nconsole.log(\"1. 동기 작업 시작\");\n\nsetTimeout(() => {\n  console.log(\"3. setTimeout 콜백 (태스크 큐)\");\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log(\"2. Promise 콜백 (마이크로태스크 큐)\");\n});\n\nconsole.log(\"4. 동기 작업 종료\");\n\n// 예상 결과:\n// 1. 동기 작업 시작\n// 4. 동기 작업 종료\n// 2. Promise 콜백 (마이크로태스크 큐)\n// 3. setTimeout 콜백 (태스크 큐)\n```\n\n이벤트 루프는 콜 스택이 비어 있을 때 태스크 큐나 마이크로태스크 큐에서 작업을 가져와 실행합니다. 이때 마이크로태스크 큐의 작업이 태스크 큐의 작업보다 먼저 처리됩니다."
  },
  {
    "id": "day22-concept-02",
    "kind": "concept",
    "md": "# 이벤트 루프의 작동 원리\n\n이벤트 루프는 다음과 같은 순서로 작동합니다.\n\n1. **콜 스택 확인:** 현재 콜 스택이 비어 있는지 확인합니다.\n2. **마이크로태스크 큐 처리:** 콜 스택이 비어 있다면, 마이크로태스크 큐에 있는 모든 작업을 콜 스택으로 옮겨 실행합니다. 마이크로태스크 큐가 완전히 빌 때까지 이 과정을 반복합니다.\n3. **태스크 큐 처리:** 마이크로태스크 큐가 비어 있다면, 태스크 큐에서 가장 오래된 작업 하나를 콜 스택으로 옮겨 실행합니다.\n4. **반복:** 1단계부터 3단계까지의 과정을 계속 반복하여 대기 중인 모든 작업을 처리합니다.\n\n이러한 메커니즘 덕분에 JavaScript는 단일 스레드임에도 불구하고 비동기 작업을 효율적으로 처리하고 사용자 인터페이스가 멈추지 않도록 할 수 있습니다."
  },
  {
    "id": "day22-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day22-01"
  },
  {
    "id": "day22-lab-01",
    "kind": "lab",
    "labId": "lab-day22-01"
  },
  {
    "id": "day22-review-01",
    "kind": "review",
    "md": "# Day 22 복습\n\n오늘은 JavaScript의 이벤트 루프 개념과 콜 스택, 힙, 태스크 큐, 마이크로태스크 큐의 역할에 대해 학습했습니다. 이벤트 루프는 JavaScript가 비동기 작업을 처리하고 논블로킹 방식으로 동작하게 하는 핵심 원리입니다.\n\n다음 시간에는 '가비지 컬렉션'에 대해 알아보겠습니다!"
  }
]
