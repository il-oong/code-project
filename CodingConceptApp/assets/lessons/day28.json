[
  {
    "id": "day28-story-01",
    "kind": "story",
    "md": "# Day 28: 코드 속 숨은 버그를 찾는 탐정, 디버깅\n\n프로그램을 만들다 보면 예상치 못한 오류, 즉 '버그'가 발생하기 마련입니다. 마치 복잡한 기계가 오작동할 때 어디가 문제인지 찾아내야 하는 것처럼, 프로그래밍에서도 버그의 원인을 찾아 수정하는 과정이 필요합니다. 이 과정을 '디버깅'이라고 하며, 개발자에게는 필수적인 기술입니다."
  },
  {
    "id": "day28-concept-01",
    "kind": "concept",
    "md": "# 디버깅 (Debugging)의 개념과 중요성\n\n**디버깅**은 프로그램 코드에서 버그(오류)를 찾아내고 수정하는 과정입니다. 디버깅을 통해 코드의 실행 흐름을 추적하고, 변수의 값을 확인하며, 예상치 못한 동작의 원인을 파악할 수 있습니다.\n\n- **버그 (Bug):** 프로그램의 오작동을 유발하는 코드의 결함이나 오류입니다.\n- **디버깅의 중요성:**\n  - **문제 해결:** 프로그램의 오작동 원인을 정확히 파악하고 해결합니다.\n  - **코드 이해:** 코드의 내부 동작 방식을 더 깊이 이해하는 데 도움을 줍니다.\n  - **개발 시간 단축:** 버그를 빠르게 찾아 수정하여 개발 효율성을 높입니다.\n  - **안정성 향상:** 버그 없는 안정적인 소프트웨어를 만듭니다."
  },
  {
    "id": "day28-example-01",
    "kind": "example",
    "md": "# `console.log()`를 이용한 디버깅\n\n가장 기본적인 디버깅 방법 중 하나는 `console.log()`를 사용하여 코드의 특정 지점에서 변수의 값을 출력하거나 코드의 실행 여부를 확인하는 것입니다.\n\n```javascript\nfunction calculateSum(a, b) {\n  console.log(\"calculateSum 함수 시작\");\n  console.log(\"a의 값: \", a); // a의 값 확인\n  console.log(\"b의 값: \", b); // b의 값 확인\n\n  let result = a + b;\n  console.log(\"계산 결과: \", result); // 결과 값 확인\n\n  console.log(\"calculateSum 함수 종료\");\n  return result;\n}\n\ncalculateSum(5, 10);\ncalculateSum(7, -3);\n```\n\n`console.log()`는 간단하지만 매우 강력한 디버깅 도구입니다. `console.trace()`, `console.count()`, `console.time()`/`console.timeEnd()` 등 다양한 `console` 메서드를 활용할 수도 있습니다."
  },
  {
    "id": "day28-concept-02",
    "kind": "concept",
    "md": "# 브라우저 개발자 도구를 이용한 디버깅\n\n현대 웹 브라우저는 강력한 개발자 도구를 제공하며, 이를 통해 훨씬 정교한 디버깅이 가능합니다. 특히 Chrome DevTools와 같은 도구는 JavaScript 디버깅에 필수적입니다.\n\n- **중단점 (Breakpoint):** 코드의 특정 라인에 설정하여 프로그램 실행을 일시 중지시키는 지점입니다. 중단점에서 멈춘 후에는 코드 실행을 한 단계씩 진행하거나, 변수의 값을 실시간으로 확인할 수 있습니다.\n- **단계별 실행 (Step-by-step execution):** 중단점에서 멈춘 후, 코드를 한 줄씩 실행하며 변수 값의 변화와 실행 흐름을 관찰할 수 있습니다.\n  - **Step over:** 현재 함수를 건너뛰고 다음 줄로 이동합니다.\n  - **Step into:** 현재 함수 내부로 들어가 함수 코드를 한 줄씩 실행합니다.\n  - **Step out:** 현재 함수를 빠져나와 호출한 곳의 다음 줄로 이동합니다.\n- **`debugger` 키워드:** 코드 내부에 `debugger;`를 삽입하면, 해당 지점에서 자동으로 중단점이 설정되어 개발자 도구가 열리고 실행이 멈춥니다."
  },
  {
    "id": "day28-example-02",
    "kind": "example",
    "md": "# 브라우저 개발자 도구 디버깅 예시\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>디버깅 예제</title>\n</head>\n<body>\n  <button id=\"myButton\">클릭하세요</button>\n  <script>\n    const button = document.getElementById('myButton');\n\n    function handleClick() {\n      let count = 0;\n      count++;\n      debugger; // 여기에 중단점 설정\n      console.log(\"버튼이 클릭되었습니다. 현재 카운트: \" + count);\n      updateDisplay(count);\n    }\n\n    function updateDisplay(value) {\n      console.log(\"화면 업데이트: \" + value);\n    }\n\n    button.addEventListener('click', handleClick);\n  </script>\n</body>\n</html>\n```\n\n위 HTML 파일을 브라우저에서 열고 개발자 도구(F12)를 연 다음, 버튼을 클릭하면 `debugger;` 라인에서 실행이 멈추는 것을 확인할 수 있습니다. 이때 스코프, 콜 스택, 변수 값 등을 확인하며 디버깅할 수 있습니다."
  },
  {
    "id": "day28-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day28-01"
  },
  {
    "id": "day28-lab-01",
    "kind": "lab",
    "labId": "lab-day28-01"
  },
  {
    "id": "day28-review-01",
    "kind": "review",
    "md": "# Day 28 복습\n\n오늘은 디버깅의 개념과 중요성, `console.log()`를 이용한 기본적인 디버깅 방법, 그리고 브라우저 개발자 도구를 활용한 고급 디버깅 방법에 대해 학습했습니다. 디버깅은 개발 과정에서 발생하는 문제를 해결하고 코드의 품질을 높이는 데 필수적인 기술입니다.\n\n다음 시간에는 '성능 최적화'에 대해 알아보겠습니다!"
  }
]
