[
  {
    "id": "day21-story-01",
    "kind": "story",
    "md": "# Day 21: 코드가 실행되는 순서와 환경, 실행 컨텍스트와 콜 스택\n\n코드가 어떻게 실행되는지, 그 내부적인 작동 방식을 이해하는 것은 중요합니다. 마치 요리사가 레시피를 따라 요리할 때, 각 단계가 어떤 순서로 진행되고 어떤 재료가 사용되는지 아는 것과 같습니다. JavaScript 코드가 실행될 때도 이와 유사하게 '실행 컨텍스트'라는 특별한 환경이 만들어지고, '콜 스택'이라는 곳에서 그 순서가 관리됩니다."
  },
  {
    "id": "day21-concept-01",
    "kind": "concept",
    "md": "# 실행 컨텍스트 (Execution Context)\n\n**실행 컨텍스트**는 JavaScript 코드가 실행되는 환경을 추상화한 개념입니다. 코드가 실행되는 데 필요한 모든 정보를 담고 있는 객체라고 생각할 수 있습니다. JavaScript 엔진은 코드를 실행할 때 이 실행 컨텍스트를 생성하고 관리합니다. 실행 컨텍스트는 다음과 같은 중요한 정보를 포함합니다.\n\n- **변수 환경 (Variable Environment):** 현재 스코프의 변수, 함수 선언, 인자 정보 등을 저장합니다.\n- **렉시컬 환경 (Lexical Environment):** 변수 환경과 유사하지만, `let`, `const`와 같은 ES6 변수 선언을 처리하는 방식이 다릅니다. 외부 렉시컬 환경에 대한 참조를 포함하여 스코프 체인을 형성합니다.\n- **`this` 바인딩:** 현재 실행 컨텍스트에서 `this` 키워드가 참조하는 객체를 결정합니다.\n\n코드가 실행될 때마다 새로운 실행 컨텍스트가 생성되고, 이 컨텍스트는 콜 스택에 쌓입니다."
  },
  {
    "id": "day21-example-01",
    "kind": "example",
    "md": "# 실행 컨텍스트의 생성 예시\n\n```javascript\nlet globalVar = \"전역 변수\"; // 전역 실행 컨텍스트에 포함\n\nfunction outerFunction() { // outerFunction 실행 컨텍스트 생성\n  let outerVar = \"외부 변수\";\n\n  function innerFunction() { // innerFunction 실행 컨텍스트 생성\n    let innerVar = \"내부 변수\";\n    console.log(globalVar, outerVar, innerVar);\n  }\n\n  innerFunction();\n}\n\nouterFunction();\n```\n\n위 코드에서 `globalVar`는 전역 실행 컨텍스트에, `outerVar`는 `outerFunction`의 실행 컨텍스트에, `innerVar`는 `innerFunction`의 실행 컨텍스트에 각각 포함됩니다."
  },
  {
    "id": "day21-concept-02",
    "kind": "concept",
    "md": "# 콜 스택 (Call Stack)\n\n**콜 스택**은 JavaScript 엔진이 함수 호출의 순서를 추적하는 데 사용하는 자료구조입니다. 함수가 호출되면 해당 함수의 실행 컨텍스트가 콜 스택의 맨 위에 추가됩니다. 함수가 실행을 마치면 해당 실행 컨텍스트가 콜 스택에서 제거됩니다.\n\n- **LIFO (Last In, First Out):** 가장 마지막에 추가된 함수가 가장 먼저 실행되고 제거됩니다.\n- **스택 오버플로우 (Stack Overflow):** 스택의 크기를 초과하여 함수가 계속 호출되면 발생하는 오류입니다."
  },
  {
    "id": "day21-example-02",
    "kind": "example",
    "md": "# 콜 스택의 동작 예시\n\n```javascript\nfunction first() {\n  console.log(\"첫 번째 함수 시작\");\n  second();\n  console.log(\"첫 번째 함수 종료\");\n}\n\nfunction second() {\n  console.log(\"두 번째 함수 시작\");\n  third();\n  console.log(\"두 번째 함수 종료\");\n}\n\nfunction third() {\n  console.log(\"세 번째 함수 시작\");\n  console.log(\"세 번째 함수 종료\");\n}\n\nfirst();\n\n// 예상되는 콜 스택 변화:\n// 1. first() 호출 -> [first EC]\n// 2. second() 호출 -> [first EC, second EC]\n// 3. third() 호출 -> [first EC, second EC, third EC]\n// 4. third() 종료 -> [first EC, second EC]\n// 5. second() 종료 -> [first EC]\n// 6. first() 종료 -> [] (빈 스택)\n```\n\n콜 스택은 함수 호출의 실행 순서를 시각적으로 이해하는 데 도움을 줍니다."
  },
  {
    "id": "day21-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day21-01"
  },
  {
    "id": "day21-lab-01",
    "kind": "lab",
    "labId": "lab-day21-01"
  },
  {
    "id": "day21-review-01",
    "kind": "review",
    "md": "# Day 21 복습\n\n오늘은 JavaScript 코드가 실행되는 내부적인 원리인 실행 컨텍스트와 함수 호출 순서를 관리하는 콜 스택에 대해 학습했습니다. 이 두 개념은 JavaScript의 동작 방식을 깊이 이해하는 데 필수적입니다.\n\n다음 시간에는 '이벤트 루프'에 대해 알아보겠습니다!"
  }
]
