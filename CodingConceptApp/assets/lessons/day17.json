[
  {
    "id": "day17-story-01",
    "kind": "story",
    "md": "# Day 17: 프로그램의 문제를 다루는 방법, 오류 처리\n\n프로그램을 만들다 보면 예상치 못한 문제나 오류가 발생할 수 있습니다. 예를 들어, 존재하지 않는 파일을 열려고 하거나, 숫자가 아닌 값을 나누려고 할 때처럼요. 이러한 오류를 적절하게 처리하지 않으면 프로그램이 갑자기 멈추거나 오작동할 수 있습니다. '오류 처리'는 프로그램이 안정적으로 동작하도록 돕는 중요한 과정입니다."
  },
  {
    "id": "day17-concept-01",
    "kind": "concept",
    "md": "# 오류 처리 (Error Handling)\n\n**오류 처리**는 프로그램 실행 중에 발생할 수 있는 예외 상황(오류)을 감지하고, 이를 복구하거나 사용자에게 알리는 일련의 과정입니다. JavaScript에서는 주로 `try...catch` 문을 사용하여 오류를 처리합니다.\n\n- **`try` 블록:** 오류가 발생할 가능성이 있는 코드를 작성합니다.\n- **`catch` 블록:** `try` 블록에서 오류가 발생했을 때 실행될 코드를 작성합니다. `catch` 블록은 발생한 오류 객체를 인수로 받습니다.\n- **`finally` 블록:** `try` 블록의 코드 실행 여부나 오류 발생 여부와 관계없이 항상 실행될 코드를 작성합니다. (선택 사항)"
  },
  {
    "id": "day17-example-01",
    "kind": "example",
    "md": "# try...catch...finally 문 사용 예시\n\n오류가 발생할 수 있는 코드를 `try...catch`로 감싸서 처리해 볼까요?\n\n```javascript\nfunction divide(a, b) {\n  try {\n    if (b === 0) {\n      throw new Error(\"0으로 나눌 수 없습니다.\");\n    }\n    return a / b;\n  } catch (error) {\n    console.error(\"오류 발생: \" + error.message);\n    return null; // 오류 발생 시 null 반환\n  } finally {\n    console.log(\"나누기 작업 시도 완료.\");\n  }\n}\n\nconsole.log(divide(10, 2)); // 결과: 나누기 작업 시도 완료. \n                            //       5\nconsole.log(divide(10, 0)); // 결과: 나누기 작업 시도 완료.\n                            //       오류 발생: 0으로 나눌 수 없습니다.\n                            //       null\n```\n\n`throw new Error()`를 사용하여 의도적으로 오류를 발생시킬 수도 있습니다."
  },
  {
    "id": "day17-concept-02",
    "kind": "concept",
    "md": "# Error 객체와 사용자 정의 오류\n\nJavaScript에서 오류는 `Error` 객체의 인스턴스로 표현됩니다. `Error` 객체는 오류에 대한 정보를 담고 있습니다.\n\n- **`Error` 객체:** `name` (오류 이름)과 `message` (오류 메시지) 속성을 가집니다. `TypeError`, `ReferenceError` 등 다양한 내장 오류 타입이 있습니다.\n- **사용자 정의 오류:** `Error` 클래스를 상속받아 자신만의 오류 클래스를 만들 수 있습니다. 이를 통해 특정 상황에 맞는 더 구체적인 오류를 처리할 수 있습니다."
  },
  {
    "id": "day17-example-02",
    "kind": "example",
    "md": "# 사용자 정의 오류 예시\n\n나이 제한을 위반했을 때 발생하는 사용자 정의 오류를 만들어 볼까요?\n\n```javascript\nclass AgeError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"AgeError\";\n  }\n}\n\nfunction checkAge(age) {\n  if (age < 18) {\n    throw new AgeError(\"미성년자는 접근할 수 없습니다.\");\n  }\n  console.log(\"성인입니다. 환영합니다!\");\n}\n\ntry {\n  checkAge(15);\n} catch (error) {\n  if (error instanceof AgeError) {\n    console.warn(`사용자 정의 오류 (${error.name}): ${error.message}`);\n  } else {\n    console.error(`알 수 없는 오류: ${error.message}`);\n  }\n}\n\ntry {\n  checkAge(20);\n} catch (error) {\n  console.error(`오류 발생: ${error.message}`);\n}\n\n// 예상 결과:\n// 사용자 정의 오류 (AgeError): 미성년자는 접근할 수 없습니다.\n// 성인입니다. 환영합니다!\n```\n\n사용자 정의 오류를 통해 프로그램의 오류 처리 로직을 더욱 세분화할 수 있습니다."
  },
  {
    "id": "day17-quiz-01",
    "kind": "quiz",
    "quizId": "quiz-day17-01"
  },
  {
    "id": "day17-lab-01",
    "kind": "lab",
    "labId": "lab-day17-01"
  },
  {
    "id": "day17-review-01",
    "kind": "review",
    "md": "# Day 17 복습\n\n오늘은 오류 처리의 개념, `try...catch...finally` 문, `Error` 객체, 그리고 사용자 정의 오류에 대해 학습했습니다. 오류 처리는 프로그램의 안정성과 신뢰성을 높이는 데 필수적인 부분입니다.\n\n다음 시간에는 '데이터 타입과 자료구조'에 대해 알아보겠습니다!"
  }
]
